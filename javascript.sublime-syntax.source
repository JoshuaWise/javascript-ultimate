%YAML 1.2
---
name: JavaScript Test
file_extensions: [js, htc]
first_line_match: '{{shebang}}'
scope: source.js

variables:
  # Low-level character categories
  unicode_other_id_start: '\x{2118}\x{212E}\x{309B}\x{309C}'
  unicode_other_id_continue: '\x{1369}\x{00B7}\x{0387}\x{19DA}'
  unicode_id_start: '\p{L}\p{Nl}{{unicode_other_id_start}}'
  unicode_id_continue: '{{unicode_id_start}}\p{Mn}\p{Mc}\p{Nd}\p{Pc}{{unicode_other_id_continue}}'
  ident_start: '{{unicode_id_start}}_$\\'
  ident_part: '{{unicode_id_continue}}\x{200C}\x{200D}_$\\'
  space_chars: '\x{0020}\x{0009}\x{000B}\x{000C}\x{00A0}\x{FEFF}\p{Zs}'
  line_terminator_chars: '\x{000a}\x{000d}\x{2028}\x{2029}'

  # Low-level JavaScript categories
  keyword: '(?:break|case|catch|class|const|continue|debugger|default|delete|do|else|export|extends|finally|for|function|if|import|in|instanceof|new|return|super|switch|this|throw|try|typeof|var|void|while|with|yield|let|of|static)'
  future_reserved_word: '(?:enum|await|implements|interface|package|private|protected|public)'
  hex_escape_sequence: '(?:x\h{2})'
  unicode_escape_sequence: '(?:u\h{4}|u\{\h++\})'
  common_regexp_escape_sequences: '(?:{{hex_escape_sequence}}|{{unicode_escape_sequence}}|c[a-zA-Z]|0(?![0-9])|[1-9][0-9]*+)'
  common_regexp_operators: '(?:\^|\$|\\|\.|\*|\+|\?|\(|\)|\[|\]|\{|\}|\||\/)'

  # Articulatory JavaScript categories
  space: '[{{space_chars}}]'
  line_terminator: '(?:\x{000d}\x{000a}|[{{line_terminator_chars}}])'
  non_token: '[{{space_chars}}{{line_terminator_chars}}]++'
  to_token: '[{{space_chars}}{{line_terminator_chars}}]*+' # skip to next token
  token: '[^{{space_chars}}{{line_terminator_chars}}]'
  b_before: '(?<![{{ident_part}}])' # word-break before
  b_after: '(?![{{ident_part}}])' # word-break after
  otherwise: '(?=[\s\S])'

  # High-level JavaScript categories
  statement_terminator: '(?:;|{{line_terminator}})'
  ident: '(?:{{b_before}}[{{ident_start}}][{{ident_part}}]*+{{b_after}})'
  reserved_word: (?:{{b_before}}(?:{{keyword}}|{{future_reserved_word}}|null|true|false){{b_after}})
  statement_keyword: (?:import|export|var|let|const|if|with|while|do|for|switch|try|catch|finally|break|continue|case|return|throw|debugger)
  shebang: '^#!/usr/bin/env node(?:{{space}}[^{{line_terminator_chars}}]*+)?+(?={{line_terminator}}|$)'
  arrow_function_with_parenthesis: '\((?={{to_token}}(?:(?:{{ident}}|\{|\[|\.\.\.)[^)]*+)?+\){{to_token}}=>)'
  arrow_function_with_reserved_word: '{{reserved_word}}(?={{to_token}}=>)'
  arrow_function_with_ident: '{{ident}}(?={{to_token}}=>)'
  assignment_for_function: '(?={{to_token}}={{to_token}}(?:function{{b_after}}{{to_token}}\(|{{arrow_function_with_parenthesis}}|{{arrow_function_with_reserved_word}}|{{arrow_function_with_ident}}))'

contexts:
  prototype:
    - match: '(//)[^{{line_terminator_chars}}]*+{{line_terminator}}?+'
      scope: comment.line.double-slash.js
      captures:
        1: punctuation.definition.comment.js
    - match: '/\*\*(?!/)'
      scope: punctuation.definition.comment.js
      push:
        - meta_scope: comment.block.documentation.js
        - match: '\*/'
          scope: punctuation.definition.comment.js
          pop: true
        - match: '^{{to_token}}\*{{to_token}}(@{{token}}++)'
          captures:
            1: keyword.other.documentation.custom.js
    - match: '/\*'
      scope: punctuation.definition.comment.js
      push:
        - meta_scope: comment.block.js
        - match: '\*/'
          scope: punctuation.definition.comment.js
          pop: true

  main:
    - match: '{{shebang}}'
      scope: comment.line.shebang.js
    - match: '{{otherwise}}'
      set:
      - match: '{{non_token}}'
      - match: '{{otherwise}}'
        push: statement










  expression_until_parenthesis: {mixin: expression, exitMatch: '\)'}
  expression_until_square_bracket: {mixin: expression, exitMatch: '\]'}
  expression_until_colon: {mixin: expression, exitMatch: ':'}
  expression_until_end_of_template_interpolation: {mixin: expression, exitMatch: '\}', exitExtra: 'scope: variable.language.js'}
  expression_until_comma_or_curly_bracket: {mixin: expression, exitMatch: '[,}]'}
  expression_until_comma_or_square_bracket_ahead: {mixin: expression, exitMatch: '(?=[,\]])'}
  expression_until_parameter_binding_list: {mixin: expression, exitMatch: '(?=\))', overrideSecondary: {match: '(?=,)', pop: true}}
  expression_until_parenthesis_with_spread: {mixin: expression, exitMatch: '\)', overridePrimary: {match: '\.\.\.', scope: keyword.operator.js, pop: true}, catchSecondary: {match: '(?<=\.\.\.)', set: expression_until_parenthesis_no_comma}}
  expression_until_parenthesis_no_comma: {mixin: expression, exitMatch: '\)', overrideSecondary: {match: ',', scope: invalid.illegal.js}}
  expression_until_parenthesis_ahead_no_comma: {mixin: expression, exitMatch: '(?=\))', overrideSecondary: {match: ',', scope: invalid.illegal.js}}
  expression_until_square_bracket_with_spread_or_comma_anywhere: {mixin: expression, exitMatch: '\]', overridePrimary: [{match: ',++'}, {match: '\.\.\.', scope: keyword.operator.js, set: _primary__expression_until_comma_or_square_bracket_ahead}]}
  expression_until_square_bracket_ahead_no_comma: {mixin: expression, exitMatch: '(?=\])', overrideSecondary: {match: ',', scope: invalid.illegal.js}}
  expression_until_for_statement_third_section: {mixin: expression, exitMatch: ';|(?=\))'}
  expression_until_for_binding: {mixin: expression, exitMatch: '(?=[,;)])', override: {match: '{{b_before}}(?:of|in){{b_after}}', scope: invalid.illegal.js}}
  _for_statement_first_expression: {mixin: expression, exitMatch: '(?=[;)]|{{b_before}}(?:of|in){{b_after}})'}

  expression_until_end_of_statement: {
    mixin: expression,
    exitMatch: ';',
    beforeAnything: {match: '{{space}}*+{{statement_terminator}}', pop: true},
    overridePrimary: {match: '{{line_terminator}}', set: [
      {match: '^(?={{to_token}}{{statement_keyword}})', pop: true},
      {include: _primary__expression_until_end_of_statement}
    ]},
    catchSecondary: {match: '^(?={{to_token}}{{statement_keyword}})', pop: true},
    overrideSecondary: [
      {match: '{{line_terminator}}', set: [
          {match: '{{non_token}}'},
          {match: ';', pop: true},
          {include: _secondary_parts__expression_until_end_of_statement},
          {match: '{{otherwise}}', pop: true}
      ]}
    ]
  }

  expression_until_end_of_statement_or_block: {
    mixin: expression,
    exitMatch: ';|(?=\})',
    beforeAnything: {match: '{{space}}*+{{statement_terminator}}', pop: true},
    overridePrimary: {match: '{{line_terminator}}', set: [
      {match: '^(?={{to_token}}{{statement_keyword}})', pop: true},
      {include: _primary__expression_until_end_of_statement_or_block}
    ]},
    catchSecondary: {match: '^(?={{to_token}}{{statement_keyword}})', pop: true},
    overrideSecondary: [
      {match: '{{line_terminator}}', set: [
        {match: '{{non_token}}'},
        {match: ';|(?=\})', pop: true},
        {include: _secondary_parts__expression_until_end_of_statement_or_block},
        {match: '{{otherwise}}', pop: true}
      ]}
    ]
  }

  expression_until_variable_binding: {
    mixin: expression,
    exitMatch: ';',
    overridePrimary: [
      {match: '{{line_terminator}}', set: [
        {match: '^(?={{to_token}}{{statement_keyword}})', pop: true},
        {include: _primary__expression_until_variable_binding}
      ]},
      {match: ',', set: _variable_binding},
    ],
    catchSecondary: {match: '^(?={{to_token}}{{statement_keyword}})', pop: true},
    overrideSecondary: [
      {match: '{{line_terminator}}', set: [
        {match: '{{non_token}}'},
        {match: ';', pop: true},
        {match: ',', set: _variable_binding},
        {include: _secondary_parts__expression_until_variable_binding},
        {match: '{{otherwise}}', pop: true}
      ]},
      {match: ',', set: _variable_binding}
    ]
  }










  destructuring_spread_for_array_destructuring: {mixin: destructuring_spread, exitMatch: '\]', initializer: expression_until_square_bracket_ahead_no_comma}
  destructuring_spread_for_parameter_binding_list: {mixin: destructuring_spread, exitMatch: '\)', initializer: expression_until_parenthesis_ahead_no_comma}

  parameter_binding_until_parenthesis: {mixin: parameter_binding, exitMatch: '\)', identExtra: 'scope: variable.language.js'}
  parameter_binding_for_object_destructuring: {mixin: parameter_binding, exitMatch: '[,}]', overrideAfter: {match: '=', scope: keyword.operator.js, set: expression_until_comma_or_curly_bracket}, identExtra: 'scope: variable.language.js'}
  parameter_binding_for_array_destructuring: {mixin: parameter_binding, exitMatch: '\]', overrideAfter: [{match: '=', scope: keyword.operator.js, push: expression_until_comma_or_square_bracket_ahead}, {match: ',', push: __parameter_binding_for_array_destructuring}], overrideBefore: [{match: ',++'}, {include: destructuring_spread_for_array_destructuring}], identExtra: 'scope: variable.language.js'}
  parameter_binding_list: {mixin: parameter_binding, exitMatch: '\)', overrideAfter: [{match: ',', set: parameter_binding_list}, {match: '=', scope: keyword.operator.js, push: expression_until_parameter_binding_list}], overrideBefore: {include: destructuring_spread_for_parameter_binding_list}, identExtra: 'scope: variable.language.js'}
  variable_binding_for_for_statement: {mixin: parameter_binding, exitMatch: '(?=[,;)]|{{b_before}}(?:of|in){{b_after}})', overrideAfter: {match: '(?==)', scope: keyword.operator.js, pop: true}, overrideIdent: {match: '{{ident}}{{assignment_for_function}}', scope: entity.function.js, pop: true}}
  variable_binding: {mixin: parameter_binding, exitMatch: '[^\s\S]', catchAfter: {match: '{{otherwise}}', pop: true}, overrideIdent: {match: '{{ident}}{{assignment_for_function}}', scope: entity.function.js, pop: true}}

  property_name: {mixin: property_name, identTail: ':'}
  property_name_possible_parenthesis: {mixin: property_name, identTail: '[:(]'}
  property_name_parenthesis_only: {mixin: property_name, identTail: '\('}










  end_of_statement: [{match: '{{statement_terminator}}', pop: true}, {include: otherwise_invalid}]
  otherwise_invalid: [{match: '{{token}}', scope: invalid.illegal.js}]

  need_opening_parenthesis: [{match: '\(', pop: true}]
  need_opening_curly_bracket: [{match: '\{', pop: true}]
  need_comma_or_closing_curly_bracket: [{match: '[,}]', pop: true}, {include: otherwise_invalid}]
  block_statement_or_comma_or_closing_curly_bracket_ahead: [{match: '(?=[,}])', pop: true}, {include: block_statement}, {include: otherwise_invalid}]
  opening_parenthesis_ahead_or_comma_or_closing_curly_bracket: [{match: '[,}]|(?=\()', pop: true}, {include: otherwise_invalid}]










  statement_in_block: {mixin: statement, terminationStatement: termination_statement_in_block, expressionStatement: expression_until_end_of_statement_or_block}
  statement: {mixin: statement, terminationStatement: termination_statement, expressionStatement: expression_until_end_of_statement}










  block_statement:
    - match: '\{'
      set:
        - match: '{{non_token}}'
        - match: '\}'
          pop: true
        - match: '{{otherwise}}'
          push: statement_in_block

  variable_statement:
    - match: '{{b_before}}(?:var|let|const){{b_after}}'
      scope: storage.type.js
      set: _variable_binding

  _variable_binding:
    - match: '{{line_terminator}}'
      set:
        - include: _continue_variable_binding
        - match: '(?={{token}})'
          pop: true
    - include: _continue_variable_binding
    - include: otherwise_invalid

  _continue_variable_binding:
    - match: '(?!{{reserved_word}})(?=\{|\[|{{ident}})'
      set: [_variable_initializer, variable_binding]

  _variable_initializer:
    - match: '(?<=[}\]])'
      set:
        - match: '{{line_terminator}}'
          set: _variable_initializer_likely_candidates
        - include: _variable_initializer_likely_candidates
        - include: otherwise_invalid
    - match: '{{otherwise}}'
      set: _variable_statement_continue

  _variable_initializer_likely_candidates:
    - match: '='
      scope: keyword.operator.js
      set: expression_until_variable_binding
    - match: ';'
      scope: invalid.illegal.js
      pop: true
    - match: ','
      scope: invalid.illegal.js
      set: _variable_binding

  _variable_statement_continue:
    - match: '{{line_terminator}}'
      set:
        - include: _continue_variable_statement_continue
        - match: '(?={{token}})'
          pop: true
    - include: _continue_variable_statement_continue
    - include: otherwise_invalid

  _continue_variable_statement_continue:
    - match: ';'
      pop: true
    - match: '='
      scope: keyword.operator.js
      set: expression_until_variable_binding
    - match: ','
      set: _variable_binding

  if_statement:
    - match: '{{b_before}}if{{b_after}}'
      scope: keyword.control.js
      set: [_optional_else_statement, statement, expression_until_parenthesis, need_opening_parenthesis]

  _optional_else_statement:
    - match: '{{non_token}}'
    - match: '{{b_before}}else{{b_after}}'
      scope: keyword.control.js
      set: statement
    - match: '{{otherwise}}'
      pop: true

  with_or_while_statement:
    - match: '{{b_before}}(?:while|with){{b_after}}'
      scope: keyword.control.js
      set: [statement, expression_until_parenthesis, need_opening_parenthesis]

  do_statement:
    - match: '{{b_before}}do{{b_after}}'
      scope: keyword.control.js
      set: [_do_while, statement]

  _do_while:
    - match: '{{b_before}}while{{b_after}}'
      set: [expression_until_parenthesis, need_opening_parenthesis]

  for_statement:
    - match: '{{b_before}}for{{b_after}}'
      scope: keyword.control.js
      set: [_for_statement_first_section, need_opening_parenthesis]

  _for_statement_first_section:
    - match: '{{non_token}}'
    - match: '\)'
      set: statement
    - match: '{{b_before}}(?:var|let|const){{b_after}}'
      scope: storage.type.js
      set: [_for_statement_interpret_binding, variable_binding_for_for_statement]
    - match: ';'
      set: [statement, expression_until_parenthesis, expression_until_for_statement_third_section]
    - match: '{{otherwise}}'
      set: [_for_statement_interpret_expression, _for_statement_first_expression]

  _for_statement_interpret_expression:
    - match: '\)'
      set: statement
    - match: ';'
      set: [statement, expression_until_parenthesis, expression_until_for_statement_third_section]
    - match: '{{b_before}}(?:of|in){{b_after}}'
      scope: keyword.operator.js
      set: [statement, expression_until_parenthesis]

  _for_statement_interpret_binding:
    - match: '\)'
      set: statement
    - match: '='
      scope: keyword.operator.js
      set: [_for_statement_variable_binding_continuation, expression_until_for_binding]
    - match: ','
      set: [_for_statement_variable_binding_continuation, variable_binding_for_for_statement]
    - match: ';'
      set: [statement, expression_until_parenthesis, expression_until_for_statement_third_section]
    - match: '{{b_before}}(?:of|in){{b_after}}'
      scope: keyword.operator.js
      set: [statement, expression_until_parenthesis]
    - include: otherwise_invalid

  _for_statement_variable_binding_continuation:
    - match: '\)'
      set: statement
    - match: '='
      scope: keyword.operator.js
      push: expression_until_for_binding
    - match: ','
      push: variable_binding_for_for_statement
    - match: ';'
      set: [statement, expression_until_parenthesis, expression_until_for_statement_third_section]
    - include: otherwise_invalid

  switch_statement:
    - match: '{{b_before}}switch{{b_after}}'
      scope: keyword.control.js
      set: [_switch_statement_block, need_opening_curly_bracket, expression_until_parenthesis, need_opening_parenthesis]

  _switch_statement_block:
    - match: '{{non_token}}'
    - match: '\}'
      pop: true
    - match: '{{b_before}}case{{b_after}}'
      scope: keyword.control.js
      push:
        - match: '{{non_token}}'
        - match: ':'
          scope: invalid.illegal.js
          pop: true
        - match: '{{otherwise}}'
          set: expression_until_colon
    - match: '{{b_before}}default{{b_after}}'
      scope: keyword.control.js
      push:
        - match: ':'
          pop: true
        - include: otherwise_invalid
    - match: '{{otherwise}}'
      push: statement_in_block

  try_statement:
    - match: '{{b_before}}try{{b_after}}'
      scope: keyword.control.js
      set: [_catch_or_finally_statement, block_statement]

  _catch_or_finally_statement:
    - include: _finally_statement
    - match: '{{b_before}}catch{{b_after}}'
      scope: keyword.control.js
      set: [_optional_finally_statement, block_statement, parameter_binding_until_parenthesis, need_opening_parenthesis]

  _optional_finally_statement:
    - match: '{{non_token}}'
    - include: _finally_statement
    - match: '{{otherwise}}'
      pop: true

  _finally_statement:
    - match: '{{b_before}}finally{{b_after}}'
      scope: keyword.control.js
      set: block_statement

  goto_statement:
    - match: '{{b_before}}(?:break|continue){{b_after}}'
      scope: keyword.control.js
      set:
        - match: '{{reserved_word}}'
          scope: invalid.illegal.js
          set: end_of_statement
        - match: '{{ident}}'
          scope: entity.name.section.js
          set: end_of_statement
        - include: end_of_statement

  termination_statement:
    - match: '{{b_before}}(?:return|throw){{b_after}}'
      scope: keyword.control.js
      set: expression_until_end_of_statement

  termination_statement_in_block:
    - match: '{{b_before}}(?:return|throw){{b_after}}'
      scope: keyword.control.js
      set: expression_until_end_of_statement_or_block

  debugger_statement:
    - match: '{{b_before}}debugger{{b_after}}'
      scope: keyword.control.js
      set: end_of_statement

  labelled_statement: # this doesn't extend through new lines
    - match: '({{reserved_word}}){{to_token}}:'
      captures:
        1: invalid.illegal.js
      pop: true
    - match: '({{ident}}){{to_token}}:'
      captures:
        1: entity.name.section.js
      pop: true
    - match: ':'
      scope: invalid.illegal.js










  parenthesized_expression:
    - match: '\('
      set: expression_until_parenthesis

  string_literal:
    - match: '('')(use strict)('')|(")(use strict)(")'
      scope: string.quoted.js
      captures:
        1: punctuation.definition.string.begin.js
        2: comment.directive.js
        3: punctuation.definition.string.end.js
        4: punctuation.definition.string.begin.js
        5: comment.directive.js
        6: punctuation.definition.string.end.js
      pop: true
    - match: ''''
      scope: punctuation.definition.string.begin.js
      set: _string_literal_contents
      with_prototype:
        - match: '"'
    - match: '"'
      scope: punctuation.definition.string.begin.js
      set: _string_literal_contents
      with_prototype:
        - match: ''''

  _string_literal_contents:
    - meta_include_prototype: false
    - meta_scope: string.quoted.js
    - include: _string_escape_sequences
    - match: '{{line_terminator}}'
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.js
        - include: _string_escape_sequences
        - match: '[''"]'
          scope: punctuation.definition.string.end.js invalid.illegal.js
          pop: true
    - match: '[''"]'
      scope: punctuation.definition.string.end.js
      pop: true

  _string_escape_sequences:
    - match: '(\\){{line_terminator}}'
      scope: constant.character.escape.js
      captures:
        1: linecontinuation.js
    - match: '\\(?:0(?![0-9])|[bfnrtv''"\\]|{{hex_escape_sequence}}|{{unicode_escape_sequence}})'
      scope: constant.character.escape.js
    - match: '\\(?:0[0-9]++|[1-9][0-9]*+)?+'
      scope: invalid.illegal.js

  template_literal:
    - match: '`'
      scope: punctuation.definition.string.begin.js
      set: _template_literal_contents

  _template_literal_contents:
    - meta_include_prototype: false
    - meta_scope: string.quoted.template.js
    - match: '\\\$'
      scope: constant.character.escape.js
    - include: _string_escape_sequences
    - match: '\$\{'
      scope: variable.language.js
      set: [_template_literal_contents, expression_until_end_of_template_interpolation]
    - match: '`'
      scope: punctuation.definition.string.end.js
      pop: true

  regular_expression_literal:
    - match: '/'
      scope: string.regexp.js punctuation.definition.string.begin.js
      set: _regular_expression_literal_contents

  _regular_expression_literal_contents:
    - meta_include_prototype: false
    - meta_content_scope: string.regexp.js
    - match: '\\(?:[dDsSwWfnrtvbB]|{{common_regexp_escape_sequences}})'
      scope: constant.character.escape.js regexp-operator.js
    - match: '\\{{common_regexp_operators}}'
      scope: constant.character.escape.js
    - match: '\^|\$|\||\?|\*|\+|\.|\{[0-9]++(?:,[0-9]*+)?+\}|\((?:\?\!|\?=|\?:)?+|\)'
      scope: regexp-operator.js
    - match: '\\(?:0[0-9]++)?+'
      scope: invalid.illegal.js
    - match: '(\[\^?+)-?+'
      scope: string.regexp.characterclass.js
      captures:
        1: punctuation.definition.string.begin.js
      set: _regular_expression_literal_class
    - match: '{{line_terminator}}'
      scope: invalid.illegal.js
      pop: true
    - match: '/(?:([gimuy]*?(?''option''[gimuy])[gimuy]*?\k''option'')|[gimuy]*)([{{ident_part}}]*+)'
      scope: string.regexp.js punctuation.definition.string.end.js
      captures:
        1: invalid.illegal.js
        3: invalid.illegal.js
      pop: true

  _regular_expression_literal_class:
    - meta_include_prototype: false
    - meta_content_scope: string.regexp.js string.regexp.characterclass.js
    - match: '\\(?:[bfnrtv]|{{common_regexp_escape_sequences}})'
      scope: constant.character.escape.js regexp-operator.js
    - match: '\\(?:-|{{common_regexp_operators}})'
      scope: constant.character.escape.js
    - match: '\\(?:0[0-9]++|[wWdDsSB]|c[0-9_])?+' # "\c[0-9_]" actually does work in the tested implementations, but it's not in the spec
      scope: invalid.illegal.js
    - match: '(?={{line_terminator}})'
      pop: true
    - match: '-?+(\])'
      captures:
        1: punctuation.definition.string.end.js
      set: _regular_expression_literal_contents
    - match: '-'
      scope: regexp-operator.js

  numeric_literal:
    - match: '{{b_before}}0([xXbBoO]){{b_after}}'
      scope: constant.numeric.js
      captures:
        1: invalid.illegal.js
      pop: true
    - match: '{{b_before}}0[xX]\h++{{b_after}}'
      scope: constant.numeric.hexadecimal.js
      pop: true
    - match: '{{b_before}}0[bB][01]++{{b_after}}'
      scope: constant.numeric.binary.js
      pop: true
    - match: '{{b_before}}0[oO][0-7]++{{b_after}}'
      scope: constant.numeric.octal.js
      pop: true
    - match: '{{b_before}}(?:(?:0|[1-9][0-9]*+)(?:\.[0-9]*+)?+|\.[0-9]++)(?:[eE][+-]?+[0-9]++)?+{{b_after}}'
      scope: constant.numeric.decimal.js
      pop: true

  constant_or_variable:
    - match: '{{b_before}}(?:true|false|null|undefined|Infinity|NaN){{b_after}}'
      scope: constant.language.js
      pop: true
    - match: '{{b_before}}(?:this|arguments|super){{b_after}}'
      scope: variable.language.js
      pop: true

  reserved_word_reference:
    - match: '{{reserved_word}}'
      scope: invalid.illegal.js
      pop: true

  identifier_reference:
    - match: '{{b_before}}(?:Object|Function|Boolean|String|Number|Symbol|Error|EvalError|RangeError|ReferenceError|SyntaxError|TypeError|URIError|Date|RegExp|Array|Uint8Array|Uint8ClampedArray|Int8Array|Uint16Array|Int16Array|Uint32Array|Int32Array|Float32Array|Float64Array|Map|Set|WeakMap|WeakSet|ArrayBuffer|DataView|Promise|Proxy){{b_after}}'
      scope: support.class.js
      set: _optional_postfix_operator
    - match: '{{b_before}}(?:console|Math|JSON|Reflect|Intl|EPSILON|MAX_SAFE_INTEGER|MIN_SAFE_INTEGER|MAX_VALUE|MIN_VALUE|NEGATIVE_INFINITY|POSITIVE_INFINITY|E|LN10|LOG10E|LOG2E|PI|SQRT1_2|SQRT2|BYTES_PER_ELEMENT){{b_after}}'
      scope: support.constant.js
      set: _optional_postfix_operator
    - match: '{{b_before}}(?:eval|isFinite|isNaN|parseFloat|parseInt|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|setTimeout|setInterval|clearTimeout|clearInterval|setImmediate|clearImmediate){{b_after}}'
      scope: support.function.js
      set: _optional_postfix_operator
    - match: '({{ident}}){{to_token}}\.{{to_token}}(prototype){{b_after}}'
      captures:
        1: support.class.js
        2: support.constant.js
      set: _optional_postfix_operator
    - match: '{{ident}}{{assignment_for_function}}'
      scope: entity.name.function.js
      pop: true
    - match: '{{ident}}'
      set: _optional_postfix_operator

  _optional_postfix_operator:
    - match: '--|\+\+'
      scope: keyword.operator.js
      pop: true
    - match: '{{otherwise}}'
      pop: true

  function_declaration:
    - match: '{{b_before}}function{{b_after}}'
      scope: storage.type.js
      set: [block_statement, parameter_binding_list, _function_declaration_name]

  _function_declaration_name:
    - match: '({{reserved_word}}){{to_token}}\('
      captures: {1: invalid.illegal.js}
      pop: true
    - match: '({{ident}}){{to_token}}\('
      captures: {1: entity.name.function.js}
      pop: true
    - include: otherwise_invalid

  array_literal:
    - match: '\['
      set: expression_until_square_bracket_with_spread_or_comma_anywhere

  object_literal:
    - match: '\{'
      set: [_object_literal_continue, _object_literal_value, _object_literal_pattern]

  _object_literal_pattern:
    - match: '{{non_token}}'
    - match: '\}'
      pop: true
    - match: '(\*)|{{b_before}}(get|set){{b_after}}'
      captures: {1: keyword.operator.js, 2: storage.type.js}
      set:
        - match: '{{ident}}'
          scope: entity.function.js
          set: opening_parenthesis_ahead_or_comma_or_closing_curly_bracket
        - include: property_name_parenthesis_only
        - include: need_comma_or_closing_curly_bracket
    - include: property_name_possible_parenthesis
    - match: '{{reserved_word}}'
      scope: invalid.illegal.js
      set: need_comma_or_closing_curly_bracket
    - match: '{{ident}}'
      scope: entity.other.js
      set: need_comma_or_closing_curly_bracket
    - include: otherwise_invalid

  _object_literal_value:
    - match: '(?<=[,}])'
      pop: true
    - match: '{{otherwise}}'
      set:
        - match: '[,}]'
          scope: invalid.illegal.js
          pop: true
        - match: '\('
          set: [need_comma_or_closing_curly_bracket, block_statement_or_comma_or_closing_curly_bracket_ahead, parameter_binding_list]
        - match: ':'
          set: expression_until_comma_or_curly_bracket
        - include: otherwise_invalid

  _object_literal_continue:
    - match: '(?<=,)'
      push: [_object_literal_value, _object_literal_pattern]
    - match: '(?<=\})'
      pop: true










  _arrow_operator:
    - match: '=>'
      scope: keyword.operator.js
      pop: true










  object_destructuring:
    - match: '\{'
      set: [_object_destructuring_continue, _object_destructuring_value, _object_destructuring_pattern]

  array_destructuring:
    - match: '\['
      set: parameter_binding_for_array_destructuring

  _object_destructuring_pattern:
    - match: '\}'
      pop: true
    - include: property_name
    - match: '{{reserved_word}}'
      scope: invalid.illegal.js
      set: _after__parameter_binding_for_object_destructuring
    - match: '{{ident}}'
      scope: variable.language.js
      set: _after__parameter_binding_for_object_destructuring
    - include: otherwise_invalid

  _object_destructuring_value:
    - match: '(?<=[,}])'
      pop: true
    - match: '{{otherwise}}'
      set:
        - match: '[,}]'
          scope: invalid.illegal.js
          pop: true
        - match: ':'
          set: parameter_binding_for_object_destructuring
        - include: otherwise_invalid

  _object_destructuring_continue:
    - match: '(?<=,)'
      push: [_object_destructuring_value, _object_destructuring_pattern]
    - match: '(?<=\})'
      pop: true
